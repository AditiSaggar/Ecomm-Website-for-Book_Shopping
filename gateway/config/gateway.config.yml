// import mongoose, { ConnectOptions } from "mongoose";
// import dotenv from "dotenv";

// dotenv.config();
// async function connectDB() {
//   try {
//     const conn = await mongoose.connect(
//       process.env.MONGODB_URI as string
//       //'mongodb://127.0.0.1:27017/Ecomm_Book_Shopping_Gateway',
//       // {
//       //   useNewUrlParser: false,
//       //   useUnifiedTopology: false,
//       // } as ConnectOptions
//     );
//     console.log(`MongoDB Connected Successfully: ${conn.connection.host}`);
//   } catch (error) {
//     console.error(error, "Not Connected");
//     return error;
//   }
// }

// export default connectDB;
# http
http:
  port: 3000

# apiEndpoints
users: host: localhost;
paths: "/api/users/*";
methods: ["GET", "POST", "PUT", "DELETE"];

product: host: localhost;
paths: "/api/products*";
methods: ["GET", "POST", "PUT", "DELETE"];

store: host: localhost;
paths: "/api/store*";
methods: ["GET", "POST", "PUT", "DELETE"];


# serviceEndpoints
serviceEndpoints:
  userService:
    url: "http://localhost:3001/"

  storeService:
    url: "http://localhost:3002/"

  productService:
    url: "http://localhost:3003/"

# policies
policies:
  - cors
  - log
  - jwt
  - proxy

# pipelines
pipelines:
  usersPipeline:
    apiEndpoints:
      - users
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'GET,PUT,PATCH,POST,DELETE'
      - log:
          - action: 
              message: ${req.method} ${req.originalUrl}
      - proxy:
          - action:
              serviceEndpoint: userService
              changeOrigin: true
  
  storePipeline:
    apiEndpoints:
      - store
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'GET,PUT,PATCH,POST,DELETE'
      - jwt:
          - action:
              secretOrPublicKey: 'nodeTypescript'
              checkCredentialExistence: false
      - log:
          - action: 
              message: ${req.method} ${req.originalUrl}
      - proxy:
          - action:
              serviceEndpoint: productService
              changeOrigin: true
              
  productsPipeline:
    apiEndpoints:
      - products
    policies:
      - cors:
          - action:
              origin: '*'
              methods: 'GET,PUT,PATCH,POST,DELETE'
      - jwt:
          - action:
              secretOrPublicKey: 'nodeTypescript'
              checkCredentialExistence: false
      - log:
          - action: 
              message: ${req.method} ${req.originalUrl}
      - proxy:
          - action:
              serviceEndpoint: productService
              changeOrigin: true